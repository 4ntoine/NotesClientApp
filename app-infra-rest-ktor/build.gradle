plugins {
    id 'idea'
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

kotlin {
    targets {
        jvm()
        iosX64() // iOS simulator
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                api "io.ktor:ktor-client-core:$rootProject.ktor_version"
                api "io.ktor:ktor-client-serialization:$rootProject.ktor_version"
                api "name.antonsmirnov.notes:app-api-metadata:$rootProject.server_module_version"
                // 'app-api' ^ has 'kotlinx-coroutines-core-common' and 'kotlinx-coroutines-core' so no need to import here
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                // some ktor-client engine impl dependency is requires in end module,
                // (see https://ktor.io/clients/http-client/engines.html)
                implementation "io.ktor:ktor-client-apache:$rootProject.ktor_version"
                api "io.ktor:ktor-client-serialization-jvm:$rootProject.ktor_version"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$rootProject.serialization_version"
                api "name.antonsmirnov.notes:app-api-jvm:$rootProject.server_module_version"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
                implementation 'com.github.tomakehurst:wiremock-jre8:2.25.1'
                implementation 'org.slf4j:slf4j-simple:1.7.30' // for wiremock
            }
        }
        iosX64Main {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$rootProject.ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$rootProject.serialization_version"
                implementation "io.ktor:ktor-client-serialization-native:$rootProject.ktor_version"
                api "name.antonsmirnov.notes:app-api-iosx64:$rootProject.server_module_version"
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$rootProject.coroutines_version"
            }
        }
    }

    // All exceptions in Kotlin are not checked, but in Swift they are checked.
    // So we need @Throws annotation for iOS compatibility to generate swift signatures with `.. throws -> ..`
    // This requires @ExperimentalMultiplatform annotation in all methods with @Throws.
    // In order to prevent adding @ExperimentalMultiplatform every here and there we can use compiler option:
    targets.all {
        compilations.all {
            kotlinOptions {
                freeCompilerArgs += '-Xuse-experimental=kotlin.ExperimentalMultiplatform'
            }
        }
    }
}

version = "$rootProject.module_version"